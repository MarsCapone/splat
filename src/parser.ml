type token =
  | NUMBER of (float)
  | IDENT of (string)
  | STRING of (string)
  | BOOLEAN_TYPE
  | NUMBER_TYPE
  | STRING_TYPE
  | STREAM_TYPE
  | LIST_TYPE
  | VOID_TYPE
  | FUNCTION_TYPE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | NOT
  | POWER_OF
  | OR
  | AND
  | IF
  | THEN
  | ELSE
  | CONS
  | HEAD
  | TAIL
  | EMPTY_LIST
  | EMPTY_STREAM
  | AS_NUM
  | APPLY
  | TRUE
  | FALSE
  | STDIN
  | STREAMIN
  | STDIN_STREAMLINE
  | STREAM_END
  | LIST_END
  | EOF
  | EOL
  | COMMA
  | AT
  | LESS_THAN
  | LESS_THAN_EQUAL
  | GREATER_THAN
  | GREATER_THAN_EQUAL
  | EQUAL_TO
  | NOT_EQUAL_TO
  | SCOPE_BRACE_LEFT
  | SCOPE_BRACE_RIGHT
  | EQUALS
  | PLUS_EQUALS
  | MINUS_EQUALS
  | MULTIPLY_EQUALS
  | DIVIDE_EQUALS
  | SHOW
  | SHOWLN
  | RANGE
  | SPLIT
  | SQUARE_BRACE_LEFT
  | SQUARE_BRACE_RIGHT
  | LET
  | SEPARATOR
  | STRING_WRAPPER
  | ESCAPE_CHAR
  | LPAREN
  | RPAREN
  | COMMENT_LEFT
  | COMMENT_RIGHT

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
    open Splat
    open Pervasives
# 76 "parser.ml"
let yytransl_const = [|
  260 (* BOOLEAN_TYPE *);
  261 (* NUMBER_TYPE *);
  262 (* STRING_TYPE *);
  263 (* STREAM_TYPE *);
  264 (* LIST_TYPE *);
  265 (* VOID_TYPE *);
  266 (* FUNCTION_TYPE *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* MODULO *);
  272 (* NOT *);
  273 (* POWER_OF *);
  274 (* OR *);
  275 (* AND *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  279 (* CONS *);
  280 (* HEAD *);
  281 (* TAIL *);
  282 (* EMPTY_LIST *);
  283 (* EMPTY_STREAM *);
  284 (* AS_NUM *);
  285 (* APPLY *);
  286 (* TRUE *);
  287 (* FALSE *);
  288 (* STDIN *);
  289 (* STREAMIN *);
  290 (* STDIN_STREAMLINE *);
  291 (* STREAM_END *);
  292 (* LIST_END *);
    0 (* EOF *);
  293 (* EOL *);
  294 (* COMMA *);
  295 (* AT *);
  296 (* LESS_THAN *);
  297 (* LESS_THAN_EQUAL *);
  298 (* GREATER_THAN *);
  299 (* GREATER_THAN_EQUAL *);
  300 (* EQUAL_TO *);
  301 (* NOT_EQUAL_TO *);
  302 (* SCOPE_BRACE_LEFT *);
  303 (* SCOPE_BRACE_RIGHT *);
  304 (* EQUALS *);
  305 (* PLUS_EQUALS *);
  306 (* MINUS_EQUALS *);
  307 (* MULTIPLY_EQUALS *);
  308 (* DIVIDE_EQUALS *);
  309 (* SHOW *);
  310 (* SHOWLN *);
  311 (* RANGE *);
  312 (* SPLIT *);
  313 (* SQUARE_BRACE_LEFT *);
  314 (* SQUARE_BRACE_RIGHT *);
  315 (* LET *);
  316 (* SEPARATOR *);
  317 (* STRING_WRAPPER *);
  318 (* ESCAPE_CHAR *);
  319 (* LPAREN *);
  320 (* RPAREN *);
  321 (* COMMENT_LEFT *);
  322 (* COMMENT_RIGHT *);
    0|]

let yytransl_block = [|
  257 (* NUMBER *);
  258 (* IDENT *);
  259 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\002\000\003\000\003\000\009\000\
\001\000\001\000\003\000\003\000\003\000\010\000\003\000\001\000\
\001\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\009\000\003\000\001\000\001\000\002\000\002\000\001\000\001\000\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\001\000\000\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\035\000\036\000\000\000\017\000\016\000\039\000\040\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\003\000\002\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\011\000\012\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\008\000\014\000"

let yydgoto = "\002\000\
\026\000\033\000\094\000\095\000"

let yysindex = "\013\000\
\139\255\000\000\000\000\000\000\065\255\139\255\139\255\139\255\
\139\255\000\000\000\000\139\255\000\000\000\000\000\000\000\000\
\000\000\139\255\139\255\139\255\139\255\139\255\201\254\010\255\
\139\255\000\000\223\001\000\000\000\000\000\000\065\255\065\255\
\014\255\254\254\038\002\092\255\092\255\092\255\092\255\092\255\
\092\255\074\002\074\002\031\255\230\254\231\254\167\255\139\255\
\139\255\139\255\139\255\139\255\139\255\139\255\139\255\139\255\
\139\255\000\000\139\255\139\255\139\255\139\255\139\255\139\255\
\024\255\002\255\238\254\000\000\066\255\246\254\000\000\000\000\
\000\000\099\255\099\255\254\254\125\255\125\255\254\254\122\002\
\109\002\074\002\087\002\029\255\029\255\029\255\029\255\242\001\
\242\001\049\255\000\000\065\255\066\255\207\255\018\255\139\255\
\070\255\000\000\066\255\051\255\002\002\015\255\000\000\028\255\
\034\255\035\255\066\255\066\255\066\255\036\255\041\255\042\255\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\161\000\245\000\071\001\109\001\139\001\
\147\001\158\000\154\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\255\000\000\000\000\000\000\
\000\000\191\000\229\000\039\000\115\000\153\000\077\000\131\001\
\009\000\163\001\123\000\238\000\025\001\033\001\063\001\093\001\
\101\001\021\255\000\000\000\000\061\255\071\255\000\000\000\000\
\000\000\000\000\061\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\255\061\255\061\255\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\228\255\255\255\106\000"

let yytablesize = 935
let yytable = "\027\000\
\020\000\044\000\065\000\066\000\034\000\035\000\036\000\037\000\
\018\000\068\000\038\000\045\000\046\000\001\000\053\000\067\000\
\039\000\040\000\041\000\042\000\043\000\068\000\006\000\047\000\
\006\000\006\000\006\000\028\000\029\000\030\000\006\000\068\000\
\070\000\031\000\071\000\072\000\090\000\096\000\023\000\048\000\
\049\000\050\000\051\000\052\000\092\000\053\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\068\000\084\000\085\000\086\000\087\000\088\000\089\000\097\000\
\100\000\091\000\003\000\004\000\028\000\029\000\030\000\102\000\
\104\000\107\000\031\000\005\000\026\000\068\000\106\000\108\000\
\109\000\006\000\113\000\006\000\006\000\007\000\032\000\114\000\
\115\000\008\000\009\000\010\000\011\000\012\000\101\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\048\000\049\000\
\050\000\051\000\052\000\051\000\053\000\054\000\055\000\050\000\
\051\000\052\000\024\000\053\000\000\000\050\000\020\000\021\000\
\057\000\022\000\013\000\000\000\023\000\093\000\024\000\032\000\
\025\000\000\000\000\000\059\000\060\000\061\000\062\000\063\000\
\064\000\050\000\000\000\003\000\004\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\025\000\000\000\006\000\000\000\000\000\046\000\007\000\000\000\
\037\000\000\000\008\000\009\000\010\000\011\000\012\000\000\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\000\000\053\000\
\054\000\055\000\000\000\000\000\000\000\056\000\021\000\020\000\
\021\000\000\000\022\000\057\000\000\000\023\000\098\000\024\000\
\000\000\025\000\000\000\000\000\103\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\110\000\111\000\112\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\000\000\053\000\
\054\000\055\000\000\000\000\000\022\000\056\000\073\000\000\000\
\000\000\000\000\000\000\057\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\020\000\020\000\020\000\020\000\020\000\
\000\000\000\000\020\000\020\000\000\000\000\000\000\000\020\000\
\027\000\000\000\018\000\018\000\000\000\020\000\000\000\018\000\
\030\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\023\000\023\000\023\000\023\000\023\000\018\000\018\000\
\023\000\023\000\020\000\000\000\020\000\023\000\028\000\000\000\
\020\000\000\000\018\000\023\000\018\000\000\000\045\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\026\000\
\026\000\026\000\026\000\026\000\032\000\000\000\026\000\026\000\
\023\000\000\000\023\000\026\000\031\000\000\000\023\000\000\000\
\000\000\026\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\024\000\024\000\000\000\
\024\000\024\000\019\000\000\000\024\000\024\000\026\000\000\000\
\026\000\024\000\043\000\000\000\026\000\000\000\000\000\024\000\
\000\000\013\000\047\000\000\000\000\000\000\000\000\000\013\000\
\000\000\044\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\034\000\025\000\025\000\000\000\025\000\025\000\
\013\000\013\000\025\000\025\000\024\000\000\000\024\000\025\000\
\000\000\000\000\024\000\000\000\013\000\025\000\013\000\037\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\000\000\021\000\021\000\046\000\046\000\000\000\037\000\037\000\
\021\000\021\000\025\000\000\000\025\000\021\000\000\000\046\000\
\025\000\046\000\037\000\021\000\037\000\046\000\058\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\000\000\022\000\
\022\000\000\000\000\000\000\000\000\000\000\000\022\000\022\000\
\021\000\000\000\021\000\022\000\000\000\000\000\021\000\029\000\
\029\000\022\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\029\000\038\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\000\000\022\000\000\000\
\022\000\000\000\038\000\038\000\022\000\000\000\000\000\029\000\
\000\000\029\000\027\000\027\000\000\000\029\000\038\000\027\000\
\038\000\000\000\030\000\030\000\038\000\027\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\028\000\028\000\027\000\000\000\027\000\028\000\000\000\000\000\
\027\000\000\000\030\000\028\000\030\000\045\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\032\000\032\000\
\000\000\000\000\000\000\032\000\045\000\045\000\031\000\031\000\
\028\000\032\000\028\000\031\000\000\000\000\000\028\000\000\000\
\045\000\031\000\045\000\042\000\000\000\000\000\045\000\000\000\
\032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\019\000\000\000\032\000\000\000\
\032\000\019\000\042\000\042\000\032\000\000\000\031\000\019\000\
\031\000\043\000\000\000\000\000\031\000\000\000\042\000\000\000\
\042\000\047\000\000\000\000\000\042\000\000\000\000\000\000\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\043\000\000\000\000\000\019\000\000\000\019\000\000\000\
\047\000\047\000\019\000\000\000\043\000\000\000\043\000\044\000\
\044\000\000\000\043\000\000\000\047\000\000\000\047\000\000\000\
\034\000\034\000\047\000\044\000\000\000\044\000\000\000\000\000\
\000\000\044\000\000\000\000\000\034\000\000\000\034\000\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\000\000\053\000\
\054\000\055\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\057\000\048\000\049\000\050\000\051\000\
\052\000\000\000\053\000\000\000\000\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\048\000\049\000\050\000\051\000\
\052\000\000\000\053\000\054\000\055\000\000\000\000\000\000\000\
\056\000\059\000\060\000\061\000\062\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\060\000\061\000\062\000\063\000\064\000\000\000\
\048\000\049\000\050\000\051\000\052\000\000\000\053\000\054\000\
\055\000\000\000\000\000\105\000\056\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\060\000\061\000\
\062\000\063\000\064\000\069\000\048\000\049\000\050\000\051\000\
\052\000\000\000\053\000\054\000\055\000\000\000\000\000\000\000\
\056\000\048\000\049\000\050\000\051\000\052\000\057\000\053\000\
\054\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\060\000\061\000\062\000\063\000\064\000\048\000\
\049\000\050\000\051\000\052\000\000\000\053\000\059\000\060\000\
\061\000\062\000\063\000\064\000\048\000\049\000\050\000\051\000\
\052\000\000\000\053\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\060\000\061\000\062\000\
\063\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\060\000\061\000\062\000\063\000\064\000"

let yycheck = "\001\000\
\000\000\057\001\031\000\032\000\006\000\007\000\008\000\009\000\
\000\000\008\001\012\000\002\001\003\001\001\000\017\001\002\001\
\018\000\019\000\020\000\021\000\022\000\008\001\002\001\025\000\
\004\001\005\001\006\001\004\001\005\001\006\001\010\001\008\001\
\002\001\010\001\061\001\061\001\065\000\048\001\000\000\011\001\
\012\001\013\001\014\001\015\001\063\001\017\001\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\008\001\059\000\060\000\061\000\062\000\063\000\064\000\092\000\
\047\001\064\001\001\001\002\001\004\001\005\001\006\001\002\001\
\022\001\046\001\010\001\010\001\000\000\008\001\064\001\046\001\
\046\001\016\001\047\001\063\001\064\001\020\001\063\001\047\001\
\047\001\024\001\025\001\026\001\027\001\028\001\096\000\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\011\001\012\001\
\013\001\014\001\015\001\047\001\017\001\018\001\019\001\013\001\
\014\001\015\001\000\000\017\001\255\255\047\001\053\001\054\001\
\029\001\056\001\000\000\255\255\059\001\060\001\061\001\063\001\
\063\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\013\001\255\255\001\001\002\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\000\000\255\255\016\001\255\255\255\255\000\000\020\001\255\255\
\000\000\255\255\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\255\255\255\255\255\255\023\001\000\000\053\001\
\054\001\255\255\056\001\029\001\255\255\059\001\093\000\061\001\
\255\255\063\001\255\255\255\255\099\000\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\107\000\108\000\109\000\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\255\255\255\255\000\000\023\001\064\001\255\255\
\255\255\255\255\255\255\029\001\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\000\000\255\255\018\001\019\001\255\255\029\001\255\255\023\001\
\000\000\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\011\001\012\001\013\001\014\001\015\001\046\001\047\001\
\018\001\019\001\058\001\255\255\060\001\023\001\000\000\255\255\
\064\001\255\255\058\001\029\001\060\001\255\255\000\000\255\255\
\064\001\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\011\001\
\012\001\013\001\014\001\015\001\000\000\255\255\018\001\019\001\
\058\001\255\255\060\001\023\001\000\000\255\255\064\001\255\255\
\255\255\029\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\011\001\012\001\255\255\
\014\001\015\001\000\000\255\255\018\001\019\001\058\001\255\255\
\060\001\023\001\000\000\255\255\064\001\255\255\255\255\029\001\
\255\255\023\001\000\000\255\255\255\255\255\255\255\255\029\001\
\255\255\000\000\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\000\000\011\001\012\001\255\255\014\001\015\001\
\046\001\047\001\018\001\019\001\058\001\255\255\060\001\023\001\
\255\255\255\255\064\001\255\255\058\001\029\001\060\001\023\001\
\255\255\255\255\064\001\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\011\001\012\001\046\001\047\001\255\255\046\001\047\001\
\018\001\019\001\058\001\255\255\060\001\023\001\255\255\058\001\
\064\001\060\001\058\001\029\001\060\001\064\001\000\000\255\255\
\064\001\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\058\001\255\255\060\001\023\001\255\255\255\255\064\001\018\001\
\019\001\029\001\255\255\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\023\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\058\001\255\255\
\060\001\255\255\046\001\047\001\064\001\255\255\255\255\058\001\
\255\255\060\001\018\001\019\001\255\255\064\001\058\001\023\001\
\060\001\255\255\018\001\019\001\064\001\029\001\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\018\001\019\001\058\001\255\255\060\001\023\001\255\255\255\255\
\064\001\255\255\058\001\029\001\060\001\023\001\255\255\255\255\
\064\001\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\018\001\019\001\
\255\255\255\255\255\255\023\001\046\001\047\001\018\001\019\001\
\058\001\029\001\060\001\023\001\255\255\255\255\064\001\255\255\
\058\001\029\001\060\001\023\001\255\255\255\255\064\001\255\255\
\044\001\045\001\046\001\047\001\255\255\255\255\255\255\255\255\
\044\001\045\001\046\001\047\001\018\001\255\255\058\001\255\255\
\060\001\023\001\046\001\047\001\064\001\255\255\058\001\029\001\
\060\001\023\001\255\255\255\255\064\001\255\255\058\001\255\255\
\060\001\023\001\255\255\255\255\064\001\255\255\255\255\255\255\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\047\001\255\255\255\255\058\001\255\255\060\001\255\255\
\046\001\047\001\064\001\255\255\058\001\255\255\060\001\046\001\
\047\001\255\255\064\001\255\255\058\001\255\255\060\001\255\255\
\046\001\047\001\064\001\058\001\255\255\060\001\255\255\255\255\
\255\255\064\001\255\255\255\255\058\001\255\255\060\001\255\255\
\255\255\255\255\064\001\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\019\001\255\255\255\255\255\255\
\023\001\040\001\041\001\042\001\043\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\019\001\255\255\255\255\058\001\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\019\001\255\255\255\255\255\255\
\023\001\011\001\012\001\013\001\014\001\015\001\029\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\040\001\041\001\
\042\001\043\001\044\001\045\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\255\255\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001"

let yynames_const = "\
  BOOLEAN_TYPE\000\
  NUMBER_TYPE\000\
  STRING_TYPE\000\
  STREAM_TYPE\000\
  LIST_TYPE\000\
  VOID_TYPE\000\
  FUNCTION_TYPE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  NOT\000\
  POWER_OF\000\
  OR\000\
  AND\000\
  IF\000\
  THEN\000\
  ELSE\000\
  CONS\000\
  HEAD\000\
  TAIL\000\
  EMPTY_LIST\000\
  EMPTY_STREAM\000\
  AS_NUM\000\
  APPLY\000\
  TRUE\000\
  FALSE\000\
  STDIN\000\
  STREAMIN\000\
  STDIN_STREAMLINE\000\
  STREAM_END\000\
  LIST_END\000\
  EOF\000\
  EOL\000\
  COMMA\000\
  AT\000\
  LESS_THAN\000\
  LESS_THAN_EQUAL\000\
  GREATER_THAN\000\
  GREATER_THAN_EQUAL\000\
  EQUAL_TO\000\
  NOT_EQUAL_TO\000\
  SCOPE_BRACE_LEFT\000\
  SCOPE_BRACE_RIGHT\000\
  EQUALS\000\
  PLUS_EQUALS\000\
  MINUS_EQUALS\000\
  MULTIPLY_EQUALS\000\
  DIVIDE_EQUALS\000\
  SHOW\000\
  SHOWLN\000\
  RANGE\000\
  SPLIT\000\
  SQUARE_BRACE_LEFT\000\
  SQUARE_BRACE_RIGHT\000\
  LET\000\
  SEPARATOR\000\
  STRING_WRAPPER\000\
  ESCAPE_CHAR\000\
  LPAREN\000\
  RPAREN\000\
  COMMENT_LEFT\000\
  COMMENT_RIGHT\000\
  "

let yynames_block = "\
  NUMBER\000\
  IDENT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
             ( _1 )
# 544 "parser.ml"
               : Splat.splTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                        ( SplatNumber )
# 550 "parser.ml"
               : Splat.splType))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                        ( SplatBoolean )
# 556 "parser.ml"
               : Splat.splType))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                        ( SplatString )
# 562 "parser.ml"
               : Splat.splType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Splat.splType) in
    Obj.repr(
# 62 "parser.mly"
                                  ( SplatList _1 )
# 569 "parser.ml"
               : Splat.splType))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Splat.splType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Splat.splType) in
    Obj.repr(
# 63 "parser.mly"
                                        ( SplatFunction (_2, _3) )
# 577 "parser.ml"
               : Splat.splType))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Splat.splType) in
    Obj.repr(
# 64 "parser.mly"
                              ( _2 )
# 584 "parser.ml"
               : Splat.splType))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr_seq) in
    Obj.repr(
# 69 "parser.mly"
                                                ( SplLet (_3, _5, _8) )
# 593 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 71 "parser.mly"
                                    ( SplNumber _1 )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                                    ( SplVariable _1 )
# 607 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 73 "parser.mly"
                                           ( SplString _2 )
# 614 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 74 "parser.mly"
                                           ( SplString _2 )
# 621 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                                    ( SplApply (_1, _3) )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Splat.splType) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : Splat.splType) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'expr_seq) in
    Obj.repr(
# 78 "parser.mly"
                                                ( SplAbs (_2, _3, _5, _6, _9) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                                    ( _2 )
# 647 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                                    ( SplBoolean false )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                                    ( SplBoolean true )
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                    ( SplAnd (_1, _3) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                    ( SplOr (_1, _3) )
# 675 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                    ( SplNot _2 )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                    ( SplPlus (_1, _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                    ( SplMinus (_1, _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                    ( SplTimes (_1, _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                                    ( SplDivide (_1, _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                    ( SplModulo (_1, _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                    ( SplPower (_1, _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                      ( SplLe (_1, _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                      ( SplGe (_1, _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                      ( SplLt (_1, _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                      ( SplGt (_1, _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                      ( SplNe (_1, _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                      ( SplEq (_1, _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr_seq) in
    Obj.repr(
# 106 "parser.mly"
                                                     ( SplIfElse (_2, _4, _8) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                                    ( SplCons (_1, _3) )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                                    ( SplList [] )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                                    ( SplStream (
        Stream.from (fun _ -> None)) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                                    ( SplHead _2 )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                                    ( SplTail _2 )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                                    ( SplList (
        let rec readlines ic =
            try let line = SplString(input_line ic) in
                line :: readlines ic
            with End_of_file -> [] in
        readlines Pervasives.stdin ) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
                                       ( SplStream( 
        Stream.from (fun _ -> try Some (input_line Pervasives.stdin) with
        End_of_file -> None) 
    ) )
# 842 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                                    ( SplString (
        try input_line Pervasives.stdin with End_of_file -> "eof" ) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                    ( SplStreamEnd _2 )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                    ( SplEmptyList _2 )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                    ( SplSplit _2 )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                    ( SplAsNum _2 )
# 877 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                    ( SplShowLn _2 )
# 884 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                    ( SplShow _2 )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 139 "parser.mly"
                                  ( _2 )
# 898 "parser.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 140 "parser.mly"
                                  ( _1 :: _3 )
# 906 "parser.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                                  ( [_1] )
# 913 "parser.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                                  ( [] )
# 919 "parser.ml"
               : 'expr_seq))
(* Entry parser_main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parser_main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Splat.splTerm)
